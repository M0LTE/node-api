name: Build and Push Docker Image

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: m0lte/node-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test Tests/ --no-restore --configuration Release --logger "console;verbosity=minimal"

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version tags
        id: tags
        run: |
          TAGS="latest"
          
          # Add semantic version tags for version tags
          if [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            TAGS="${VERSION};latest"
            
            # Add major.minor tag
            if [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\. ]]; then
              TAGS="${TAGS};${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
              # Add major tag
              TAGS="${TAGS};${BASH_REMATCH[1]}"
            fi
          # Add branch name and SHA for branch pushes
          elif [[ "${{ github.ref }}" =~ ^refs/heads/(.*)$ ]]; then
            BRANCH="${BASH_REMATCH[1]}"
            SHA="${{ github.sha }}"
            SHORT_SHA="${SHA:0:7}"
            TAGS="${BRANCH};${BRANCH}-${SHORT_SHA};latest"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Building with tags: ${TAGS}"

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          cd node-api
          dotnet publish \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained false \
            /t:PublishContainer \
            /p:ContainerRegistry=${{ env.REGISTRY }} \
            /p:ContainerRepository=${{ env.IMAGE_NAME }} \
            /p:ContainerImageTags="${{ steps.tags.outputs.tags }}"

      - name: Build Docker image (PR only - no push)
        if: github.event_name == 'pull_request'
        run: |
          cd node-api
          dotnet publish \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained false \
            /t:PublishContainer

      - name: Image summary
        if: github.event_name != 'pull_request'
        run: |
          echo "### Docker Image Published :whale:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** \`${{ steps.tags.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pull command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
