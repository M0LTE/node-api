name: Build and Push Docker Image

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: m0lte/node-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test Tests/ --no-restore --configuration Release --logger "console;verbosity=minimal"

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version tags
        id: tags
        run: |
          TAGS="latest"
          
          # Add semantic version tags for version tags
          if [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            TAGS="${VERSION};latest"
            
            # Add major.minor tag
            if [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\. ]]; then
              TAGS="${TAGS};${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
              # Add major tag
              TAGS="${TAGS};${BASH_REMATCH[1]}"
            fi
          # Add branch name and SHA for branch pushes
          elif [[ "${{ github.ref }}" =~ ^refs/heads/(.*)$ ]]; then
            BRANCH="${BASH_REMATCH[1]}"
            SHA="${{ github.sha }}"
            SHORT_SHA="${SHA:0:7}"
            TAGS="${BRANCH};${BRANCH}-${SHORT_SHA};latest"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Building with tags: ${TAGS}"

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        working-directory: node-api
        env:
          ContainerImageTags: ${{ steps.tags.outputs.tags }}
          ContainerRegistry: ${{ env.REGISTRY }}
          ContainerRepository: ${{ env.IMAGE_NAME }}
        run: |
          dotnet publish \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained false \
            /t:PublishContainer

      - name: Build Docker image (PR only - no push)
        if: github.event_name == 'pull_request'
        run: |
          cd node-api
          dotnet publish \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained false \
            /t:PublishContainer

      - name: Image summary
        if: github.event_name != 'pull_request'
        run: |
          echo "### Docker Image Published :whale:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** \`${{ steps.tags.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pull command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check deployment configuration
        id: check-deploy
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        run: |
          if [ -n "${{ secrets.DEPLOY_SSH_KEY }}" ] && \
             [ -n "${{ secrets.DEPLOY_HOST }}" ] && \
             [ -n "${{ secrets.DEPLOY_USER }}" ] && \
             [ -n "${{ secrets.DEPLOY_SCRIPT_PATH }}" ]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "All deployment secrets are configured"
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "Missing deployment secrets:"
            [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ] && echo "  - DEPLOY_SSH_KEY"
            [ -z "${{ secrets.DEPLOY_HOST }}" ] && echo "  - DEPLOY_HOST"
            [ -z "${{ secrets.DEPLOY_USER }}" ] && echo "  - DEPLOY_USER"
            [ -z "${{ secrets.DEPLOY_SCRIPT_PATH }}" ] && echo "  - DEPLOY_SCRIPT_PATH"
          fi

      - name: Deploy to remote server
        if: steps.check-deploy.outputs.enabled == 'true'
        run: |
          set -e  # Exit on error
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Verify SSH key is valid
          echo "Verifying SSH key format..."
          ssh-keygen -l -f ~/.ssh/deploy_key || {
            echo "ERROR: Invalid SSH key format"
            exit 1
          }
          
          # Test host connectivity
          echo "Testing connectivity to ${{ secrets.DEPLOY_HOST }}..."
          if ! ping -c 1 -W 5 ${{ secrets.DEPLOY_HOST }} > /dev/null 2>&1; then
            echo "WARNING: Host ${{ secrets.DEPLOY_HOST }} is not responding to ping (this may be normal if ICMP is blocked)",
          fi
          
          # Add host to known_hosts to avoid prompt
          echo "Adding host to known_hosts..."
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts 2>&1 || {
            echo "ERROR: Failed to scan host keys from ${{ secrets.DEPLOY_HOST }}"
            echo "This usually means the host is unreachable or SSH is not running on port 22"
            exit 1
          }
          
          # Copy the update script to ensure it's current (convert line endings)
          sed -i 's/\r$//' deploy/update-service.sh
          
          echo "Copying deployment script to server..."
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            deploy/update-service.sh \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_SCRIPT_PATH }} || {
            echo "ERROR: Failed to copy deployment script"
            exit 1
          }
          
          echo "Making script executable..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "chmod +x ${{ secrets.DEPLOY_SCRIPT_PATH }}" || {
            echo "ERROR: Failed to make script executable"
            exit 1
          }
          
          echo "Executing remote update..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "bash ${{ secrets.DEPLOY_SCRIPT_PATH }}" || {
            echo "ERROR: Remote deployment script failed"
            exit 1
          }
          
          # Cleanup
          rm ~/.ssh/deploy_key
          
          echo "Deployment completed successfully!"

      - name: Deployment summary
        if: steps.check-deploy.outputs.enabled == 'true'
        run: |
          echo "### Deployment Complete :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Server:** \`${{ secrets.DEPLOY_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Deployed and restarted" >> $GITHUB_STEP_SUMMARY

      - name: Deployment skipped
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master' && steps.check-deploy.outputs.enabled == 'false'
        run: |
          echo "### Deployment Skipped :information_source:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployment secrets are not configured." >> $GITHUB_STEP_SUMMARY
          echo "See DEPLOYMENT.md for setup instructions." >> $GITHUB_STEP_SUMMARY
